{"ast":null,"code":"var _jsxFileName = \"C:\\\\pproject-files\\\\E-COMMERCE\\\\LUXE-STORE\\\\src\\\\components\\\\Slider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport ArrowLeftOutlinedIcon from '@mui/icons-material/ArrowLeftOutlined';\nimport ArrowRightOutlinedIcon from '@mui/icons-material/ArrowRightOutlined';\nimport { SliderItems } from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    display: flex;\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    margin-top: 20px;\n    overflow: hidden;\n`;\n_c = Container;\nconst Wrapper = styled.div`\n    height: 100%;\n    display: flex;\n    ${''\n/* Since X-axis affects the width of the viewport and Y-axis affects the height of the viewport.. */\n}\n    ${''\n/* Here I'm running the transform at X-axis since we are to move the slides horizontally and that means the X-axis(if we consider the viewport as a quadrant) */\n}\n    ${''\n/* -100vw :  means the  */\n}\n    transition: all 1.5s;\n    transform: translateX(${props => props.slideIndex * -100}vw);\n`;\n_c2 = Wrapper;\nconst Slide = styled.div`\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    background-color: #${props => props.bg}\n`;\n_c3 = Slide;\nconst ImgContainer = styled.div`\n    flex: 1;  \n    height: 100%;  \n`;\n_c4 = ImgContainer;\nconst Image = styled.img`\n    height: 80%;\n`;\n_c5 = Image;\nconst InfoContainer = styled.div`\n    flex: 1;\n    padding: 50px;\n`;\n_c6 = InfoContainer;\nconst Title = styled.h1`\n    font-size: 70px;\n`;\n_c7 = Title;\nconst Desc = styled.p`\n    margin: 50px 0px;\n    font-size: 20px;\n    font-weight: 500;\n    letter-spacing: 3px;\n`;\n_c8 = Desc;\nconst Button = styled.button`\n    padding: 10px;\n    font-size: 20px;\n    background-color: transparent;\n    cursor: pointer;\n`;\n_c9 = Button;\nconst Arrow = styled.div`\n    width: 50px;\n    height: 50px;\n    background-color: #EDF6F9;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    ${''\n/* putting the ternary condition here to check for the direction of the arrow and setting the position accordingly.. */\n}\n    left: ${props => props.direction === \"left\" && \"10px\"};\n    right: ${props => props.direction === \"right\" && \"10px\"};\n    margin: auto;\n    cursor: pointer;\n    opacity: 0.5;\n    z-index: 2;\n`; // // Adding dots to the current slide.. \n// const settings = {\n//     dots: true,\n//     arrows: true,\n//     infinite: false,\n//     slidesToShow: 1,\n//     slidesToScroll: 1,\n//     initialSlide: 1,\n//     speed: 500,\n//     appendDots: dots => {\n//       return <MagicSliderDots dots={dots} numDotsToShow={4} dotWidth={30} />;\n//     };\n\n_c10 = Arrow;\n\nfunction Slider() {\n  _s();\n\n  // here I'm going to use the SliderItems array, so the first element will be at position 0. So we start from there.. \n  const [slideIndex, setSlideIndex] = useState(0); // Defining the handleClick for the direction, so that it could add the back and forward functionality to the arrows of the slidder.. \n\n  const handleClick = direction => {\n    // suppose if the current display slide is the first one (meaning the index for the slide is 0), \n    // and when we click on the forward arrow button the index value of the slide will change to 1 and it will start displaying the second slide and so on \n    // but when it go to the third slide and we click the forward button again then it will set the index value to be zero (0) meaning the first slide. \n    // Since we only have three slides here.. \n    // Similary when we encounter the left/back arrow. If the first slide is in display then the index value is set at zero but when we click on the back \n    // arrow button then the it will start displaying the third slide setting the index value to be 2. \n    // Defining the arrow functionality for slides.. \n    if (direction === \"left\") {\n      // If the slide index is greater than zero meaning there is/are slides in the left panel and by clicking the \n      // back arrow button it will reduce the slide index value by 1, so it will start displaying the previous slide.\n      // In another scenario when it is not then clicking the back arrow button will set the slide to display the slide \n      // which is at slide index 2 meaning the right most one. \n      setSlideIndex(slideIndex > 0 ? slideIndex - 1 : 2);\n    } else {\n      // so if the current slide index is less than two meaning there is/are another slides in the right side. \n      // So by clicking the button, the slide index will get increase by 1 meaning the next slide will display.\n      // Otherwise the slide index will get set to 0, which in turn will display the first slide. \n      setSlideIndex(slideIndex < 2 ? slideIndex + 1 : 0);\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Arrow, {\n      direction: \"left\",\n      onClick: () => handleClick(\"left\"),\n      children: /*#__PURE__*/_jsxDEV(ArrowLeftOutlinedIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      slideIndex: slideIndex,\n      children: SliderItems.map(item => /*#__PURE__*/_jsxDEV(Slide, {\n        bg: item.bg,\n        children: [/*#__PURE__*/_jsxDEV(ImgContainer, {\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            src: item.img\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InfoContainer, {\n          children: [/*#__PURE__*/_jsxDEV(Title, {\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Desc, {\n            children: item.desc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            children: \"SHOP NOW\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Arrow, {\n      direction: \"right\",\n      onClick: () => handleClick(\"right\"),\n      children: /*#__PURE__*/_jsxDEV(ArrowRightOutlinedIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Slider, \"0yB34WFJoKB17f3kT+wIMpxNoV8=\");\n\n_c11 = Slider;\nexport default Slider;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Wrapper\");\n$RefreshReg$(_c3, \"Slide\");\n$RefreshReg$(_c4, \"ImgContainer\");\n$RefreshReg$(_c5, \"Image\");\n$RefreshReg$(_c6, \"InfoContainer\");\n$RefreshReg$(_c7, \"Title\");\n$RefreshReg$(_c8, \"Desc\");\n$RefreshReg$(_c9, \"Button\");\n$RefreshReg$(_c10, \"Arrow\");\n$RefreshReg$(_c11, \"Slider\");","map":{"version":3,"sources":["C:/pproject-files/E-COMMERCE/LUXE-STORE/src/components/Slider.jsx"],"names":["React","useState","styled","ArrowLeftOutlinedIcon","ArrowRightOutlinedIcon","SliderItems","Container","div","Wrapper","props","slideIndex","Slide","bg","ImgContainer","Image","img","InfoContainer","Title","h1","Desc","p","Button","button","Arrow","direction","Slider","setSlideIndex","handleClick","map","item","title","desc"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components';\r\nimport ArrowLeftOutlinedIcon from '@mui/icons-material/ArrowLeftOutlined';\r\nimport ArrowRightOutlinedIcon from '@mui/icons-material/ArrowRightOutlined';\r\nimport { SliderItems } from './data';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: relative;\r\n    margin-top: 20px;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    height: 100%;\r\n    display: flex;\r\n    ${'' /* Since X-axis affects the width of the viewport and Y-axis affects the height of the viewport.. */}\r\n    ${'' /* Here I'm running the transform at X-axis since we are to move the slides horizontally and that means the X-axis(if we consider the viewport as a quadrant) */}\r\n    ${'' /* -100vw :  means the  */}\r\n    transition: all 1.5s;\r\n    transform: translateX(${(props)=>props.slideIndex * -100}vw);\r\n`;\r\n\r\nconst Slide = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: #${props=>props.bg}\r\n`;\r\n\r\nconst ImgContainer = styled.div`\r\n    flex: 1;  \r\n    height: 100%;  \r\n`;\r\n\r\nconst Image = styled.img`\r\n    height: 80%;\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n    flex: 1;\r\n    padding: 50px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    font-size: 70px;\r\n`;\r\n\r\nconst Desc = styled.p`\r\n    margin: 50px 0px;\r\n    font-size: 20px;\r\n    font-weight: 500;\r\n    letter-spacing: 3px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    padding: 10px;\r\n    font-size: 20px;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Arrow = styled.div`\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: #EDF6F9;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    ${'' /* putting the ternary condition here to check for the direction of the arrow and setting the position accordingly.. */}\r\n    left: ${props => props.direction === \"left\" && \"10px\"};\r\n    right: ${props => props.direction === \"right\" && \"10px\"};\r\n    margin: auto;\r\n    cursor: pointer;\r\n    opacity: 0.5;\r\n    z-index: 2;\r\n`;\r\n\r\n// // Adding dots to the current slide.. \r\n// const settings = {\r\n//     dots: true,\r\n//     arrows: true,\r\n//     infinite: false,\r\n//     slidesToShow: 1,\r\n//     slidesToScroll: 1,\r\n//     initialSlide: 1,\r\n//     speed: 500,\r\n//     appendDots: dots => {\r\n//       return <MagicSliderDots dots={dots} numDotsToShow={4} dotWidth={30} />;\r\n//     };\r\n\r\n\r\n\r\nfunction Slider() {\r\n\r\n    // here I'm going to use the SliderItems array, so the first element will be at position 0. So we start from there.. \r\n    const [slideIndex, setSlideIndex] = useState(0);\r\n\r\n    // Defining the handleClick for the direction, so that it could add the back and forward functionality to the arrows of the slidder.. \r\n    const handleClick = (direction) => {\r\n        \r\n        // suppose if the current display slide is the first one (meaning the index for the slide is 0), \r\n        // and when we click on the forward arrow button the index value of the slide will change to 1 and it will start displaying the second slide and so on \r\n        // but when it go to the third slide and we click the forward button again then it will set the index value to be zero (0) meaning the first slide. \r\n        // Since we only have three slides here.. \r\n\r\n        // Similary when we encounter the left/back arrow. If the first slide is in display then the index value is set at zero but when we click on the back \r\n        // arrow button then the it will start displaying the third slide setting the index value to be 2. \r\n\r\n        // Defining the arrow functionality for slides.. \r\n        if(direction===\"left\"){\r\n            // If the slide index is greater than zero meaning there is/are slides in the left panel and by clicking the \r\n            // back arrow button it will reduce the slide index value by 1, so it will start displaying the previous slide.\r\n            // In another scenario when it is not then clicking the back arrow button will set the slide to display the slide \r\n            // which is at slide index 2 meaning the right most one. \r\n            setSlideIndex(slideIndex > 0 ? slideIndex-1 : 2)\r\n        } else { \r\n            // so if the current slide index is less than two meaning there is/are another slides in the right side. \r\n            // So by clicking the button, the slide index will get increase by 1 meaning the next slide will display.\r\n            // Otherwise the slide index will get set to 0, which in turn will display the first slide. \r\n            setSlideIndex(slideIndex < 2 ? slideIndex+1 : 0)\r\n        }; \r\n    }\r\n\r\n  return (\r\n    <Container>\r\n\r\n            {/* Left side of the arrow in the slider component */}\r\n            <Arrow direction=\"left\" onClick={()=>handleClick(\"left\")}>\r\n                <ArrowLeftOutlinedIcon />\r\n            </Arrow>\r\n\r\n            <Wrapper slideIndex={slideIndex}>\r\n\r\n                {/* mapping the SliderItems array to pass the data dynamically.. */}\r\n                {SliderItems.map((item) =>\r\n                    <Slide bg={item.bg}>\r\n                    <ImgContainer>\r\n                        <Image src={item.img} />\r\n                    </ImgContainer>\r\n                    <InfoContainer>\r\n                        <Title>{item.title}</Title>\r\n                        <Desc>{item.desc}</Desc>\r\n                        <Button>SHOP NOW</Button>\r\n                    </InfoContainer>\r\n                </Slide>\r\n                )}\r\n                \r\n\r\n                {/* Second slidder of the Homepage..\r\n                <Slide bg=\"#978ADE\">\r\n                    <ImgContainer>\r\n                        <Image src='https://pngimg.com/uploads/cat/cat_PNG50533.png' />\r\n                    </ImgContainer>\r\n                    <InfoContainer>\r\n                        <Title>WINTER SALE</Title>\r\n                        <Desc>Dolor velit esse sint et ad enim mollit tempor aute ullamco quis.</Desc>\r\n                        <Button>SHOP NOW</Button>\r\n                    </InfoContainer>\r\n                </Slide> */}\r\n\r\n                {/* Third slidder of the Homepage..\r\n                <Slide bg=\"#D9BAA7\">\r\n                    <ImgContainer>\r\n                        <Image src='https://pngimg.com/uploads/cat/cat_PNG50533.png' />\r\n                    </ImgContainer>\r\n                    <InfoContainer>\r\n                        <Title>POPULAR SALE</Title>\r\n                        <Desc>Dolor velit esse sint et ad enim mollit tempor aute ullamco quis.</Desc>\r\n                        <Button>SHOP NOW</Button>\r\n                    </InfoContainer>\r\n                </Slide> */}\r\n\r\n            </Wrapper>\r\n\r\n            {/* Right side arrow in the slidder component */}\r\n            <Arrow direction=\"right\" onClick={()=>handleClick(\"right\")}>\r\n                <ArrowRightOutlinedIcon />  \r\n            </Arrow>\r\n\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Slider"]},"metadata":{},"sourceType":"module"}